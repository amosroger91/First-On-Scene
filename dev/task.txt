## ðŸš€ Suggested Triage System Expansions

This document outlines key capabilities to incorporate into \`Gather_Info.ps1\` and \`Parse_Results.ps1\` to address identified forensic gaps, leveraging native PowerShell, FOSS, and Winget installation.

---

### 0. Pre-Scan Remediation (rkill.exe)

| Gap | Goal | Implementation in \`Gather_Info.ps1\` |
| :--- | :--- | :--- |
| **Pre-Scan Kill** | **Neutralize immediate threats** before scans contaminate volatile memory or logs. | **Download/Execute Logic:** Use \`Invoke-WebRequest\` to download \`rkill.exe\` to a temp location on the target (local or remote). Execute it **silently** via \`Start-Process -Wait\` before collecting any artifacts. Log action to \`Steps_Taken.txt\`. |

---

### 1. Extended Persistence Mechanisms (Native PowerShell)

**Goal:** Capture all non-standard, stealthy methods attackers use to maintain access across reboots.

| Artifact | PowerShell Cmdlet/Method | Output File | Triage Logic in \`Parse_Results.ps1\` |
| :--- | :--- | :--- | :--- |
| **Scheduled Tasks** | \`Get-ScheduledTask -State All\` | \`scheduled_tasks.json\` | Flag tasks executing from **non-system paths** (e.g., \`C:\\Users\\*\`, \`C:\\Temp\`) or tasks with suspicious names/users. |
| **Windows Services** | \`Get-CimInstance Win32_Service\` | \`services_config.json\` | Flag services set to **Auto-Start** running from non-standard executable paths or recently created/modified. |
| **WMI Event Subs** | \`Get-CimInstance -Namespace root\\subscription\` (Filters, Consumers, Bindings) | \`wmi_persistence.json\` | Flag the **existence** of any non-standard WMI event subscriptions, as this is inherently suspicious. |

---

### 2. Comprehensive Event Log Analysis (Native PowerShell)

**Goal:** Capture the full chain of execution and privilege escalation, which is missing from the limited current log collection.

| Event Log Artifact | Event IDs/Source | Implementation in \`Gather_Info.ps1\` | Triage Logic in \`Parse_Results.ps1\` |
| :--- | :--- | :--- | :--- |
| **Process Creation** | **4688** (Security) | **Expand \`Get-WinEvent\` filter** to include this ID. Crucial for parent-child analysis. | Look for suspicious parent-child relationships (e.g., Office apps spawning \`powershell.exe\`). |
| **PowerShell Logging** | **Microsoft-Windows-PowerShell/Operational** | Add a separate \`Get-WinEvent\` call for this log path. | Flag script block content indicating obfuscation, known malicious commands, or base64 decoding. |
| **Key Security Events** | **4697, 4720, 4663** (Security) | **Expand \`Get-WinEvent\` filter** to include Service Installation, User Creation, and Object Access attempts. | Flag service installation paths, newly created user accounts, and failed access attempts. |

---

### 3. Execution History & User Artifacts (FOSS/Winget Dependency)

**Goal:** Determine *what* executed and *how* the event started, relying on artifacts more persistent than the process snapshot.

| Artifact | Tool/Dependency Strategy | Implementation in \`Gather_Info.ps1\` |
| :--- | :--- | :--- |
| **Browser History/Downloads** | **Install Python via Winget** (\`OpenJS.NodeJS\` equivalent) and execute a Python FOSS SQLite parser. | Copy browser SQLite files (Chrome, Edge, Firefox) to the results directory, then execute the parser script on the copy. Output: \`browser_history.json\`. |
| **Prefetch/Amcache** | **FOSS Forensic CLI Tool** (If Winget-available, e.g., via a community-packaged solution). | Check for the tool via \`Get-Command\`. If found, execute it to parse key execution history files and output to JSON. **(Requires FOSS tool identification.)** |

---

### 4. File System and Time-Based Artifacts (Targeted Collection)

**Goal:** Collect crucial file metadata for any identified suspicious files.

| Artifact | PowerShell Cmdlet/Method | Implementation in \`Gather_Info.ps1\` |
| :--- | :--- | :--- |
| **MACE Timestamps** | \`Get-Item\` (CreationTime, LastWriteTime, LastAccessTime) | **Targeted Collection:** In the new \`Parse_Results.ps1\` logic, if a file is flagged (e.g., by a Run key or service path), add logic back to \`Gather_Info.ps1\` to run a targeted \`Get-Item\` on that file path. Output: \`file_metadata.json\`. |